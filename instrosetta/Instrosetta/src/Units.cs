// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: instrosetta/common/units.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from instrosetta/common/units.proto</summary>
public static partial class UnitsReflection {

  #region Descriptor
  /// <summary>File descriptor for instrosetta/common/units.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static UnitsReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Ch5pbnN0cm9zZXR0YS9jb21tb24vdW5pdHMucHJvdG8iugEKEVBoeXNpY2Fs",
          "RGltZW5zaW9uEgwKBG5hbWUYASABKAkSFgoOZGltZW5zaW9uX25hbWUYAiAB",
          "KAkSDAoEdGltZRgDIAEoAhIOCgZsZW5ndGgYBCABKAISDAoEbWFzcxgFIAEo",
          "AhIPCgdjdXJyZW50GAYgASgCEhMKC3RlbXBlcmF0dXJlGAcgASgCEhEKCXN1",
          "YnN0YW5jZRgIIAEoAhIaChJsdW1pbm91c19pbnRlbnNpdHkYCSABKAIifgoM",
          "UGh5c2ljYWxVbml0EgwKBG5hbWUYASABKAkSEQoJdW5pdF9uYW1lGAIgASgJ",
          "Eg8KB2FsaWFzZXMYAyADKAkSJQoJZGltZW5zaW9uGAQgASgLMhIuUGh5c2lj",
          "YWxEaW1lbnNpb24SFQoNc2lfbXVsdGlwbGllchgFIAEoASJQChBQaHlzaWNh",
          "bFF1YW50aXR5EgwKBG5hbWUYASABKAkSGwoEdW5pdBgCIAEoCzINLlBoeXNp",
          "Y2FsVW5pdBIRCgltYWduaXR1ZGUYAyABKAEiXAoJVGltZXN0YW1wEgwKBG5h",
          "bWUYASABKAkSDQoFdmFsdWUYAiABKAMSFgoOcHJlY2lzaW9uX25hbWUYAyAB",
          "KAkSGgoScHJlY2lzaW9uX2V4cG9uZW50GAQgASgFIoMBChNQaHlzaWNhbE1l",
          "YXN1cmVtZW50EgwKBG5hbWUYASABKAkSIAoFdmFsdWUYAiABKAsyES5QaHlz",
          "aWNhbFF1YW50aXR5Eh0KB3F1YWxpdHkYAyABKA4yDC5EYXRhUXVhbGl0eRId",
          "Cgl0aW1lc3RhbXAYBCABKAsyCi5UaW1lc3RhbXAqLQoLRGF0YVF1YWxpdHkS",
          "CwoHVU5LTk9XThAAEggKBEdPT0QQARIHCgNCQUQQAmIGcHJvdG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(new[] {typeof(global::DataQuality), }, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::PhysicalDimension), global::PhysicalDimension.Parser, new[]{ "Name", "DimensionName", "Time", "Length", "Mass", "Current", "Temperature", "Substance", "LuminousIntensity" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PhysicalUnit), global::PhysicalUnit.Parser, new[]{ "Name", "UnitName", "Aliases", "Dimension", "SiMultiplier" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PhysicalQuantity), global::PhysicalQuantity.Parser, new[]{ "Name", "Unit", "Magnitude" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Timestamp), global::Timestamp.Parser, new[]{ "Name", "Value", "PrecisionName", "PrecisionExponent" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PhysicalMeasurement), global::PhysicalMeasurement.Parser, new[]{ "Name", "Value", "Quality", "Timestamp" }, null, null, null)
        }));
  }
  #endregion

}
#region Enums
public enum DataQuality {
  [pbr::OriginalName("UNKNOWN")] Unknown = 0,
  [pbr::OriginalName("GOOD")] Good = 1,
  [pbr::OriginalName("BAD")] Bad = 2,
}

#endregion

#region Messages
/// <summary>
/// Currently only SI derived dimensions are supported
/// </summary>
public sealed partial class PhysicalDimension : pb::IMessage<PhysicalDimension> {
  private static readonly pb::MessageParser<PhysicalDimension> _parser = new pb::MessageParser<PhysicalDimension>(() => new PhysicalDimension());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PhysicalDimension> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::UnitsReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PhysicalDimension() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PhysicalDimension(PhysicalDimension other) : this() {
    name_ = other.name_;
    dimensionName_ = other.dimensionName_;
    time_ = other.time_;
    length_ = other.length_;
    mass_ = other.mass_;
    current_ = other.current_;
    temperature_ = other.temperature_;
    substance_ = other.substance_;
    luminousIntensity_ = other.luminousIntensity_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PhysicalDimension Clone() {
    return new PhysicalDimension(this);
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 1;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "dimension_name" field.</summary>
  public const int DimensionNameFieldNumber = 2;
  private string dimensionName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DimensionName {
    get { return dimensionName_; }
    set {
      dimensionName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "time" field.</summary>
  public const int TimeFieldNumber = 3;
  private float time_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Time {
    get { return time_; }
    set {
      time_ = value;
    }
  }

  /// <summary>Field number for the "length" field.</summary>
  public const int LengthFieldNumber = 4;
  private float length_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Length {
    get { return length_; }
    set {
      length_ = value;
    }
  }

  /// <summary>Field number for the "mass" field.</summary>
  public const int MassFieldNumber = 5;
  private float mass_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Mass {
    get { return mass_; }
    set {
      mass_ = value;
    }
  }

  /// <summary>Field number for the "current" field.</summary>
  public const int CurrentFieldNumber = 6;
  private float current_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Current {
    get { return current_; }
    set {
      current_ = value;
    }
  }

  /// <summary>Field number for the "temperature" field.</summary>
  public const int TemperatureFieldNumber = 7;
  private float temperature_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Temperature {
    get { return temperature_; }
    set {
      temperature_ = value;
    }
  }

  /// <summary>Field number for the "substance" field.</summary>
  public const int SubstanceFieldNumber = 8;
  private float substance_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Substance {
    get { return substance_; }
    set {
      substance_ = value;
    }
  }

  /// <summary>Field number for the "luminous_intensity" field.</summary>
  public const int LuminousIntensityFieldNumber = 9;
  private float luminousIntensity_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float LuminousIntensity {
    get { return luminousIntensity_; }
    set {
      luminousIntensity_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PhysicalDimension);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PhysicalDimension other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    if (DimensionName != other.DimensionName) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Time, other.Time)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Length, other.Length)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Mass, other.Mass)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Current, other.Current)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Temperature, other.Temperature)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Substance, other.Substance)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LuminousIntensity, other.LuminousIntensity)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (DimensionName.Length != 0) hash ^= DimensionName.GetHashCode();
    if (Time != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Time);
    if (Length != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Length);
    if (Mass != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Mass);
    if (Current != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Current);
    if (Temperature != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Temperature);
    if (Substance != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Substance);
    if (LuminousIntensity != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LuminousIntensity);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Name.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
    if (DimensionName.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(DimensionName);
    }
    if (Time != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(Time);
    }
    if (Length != 0F) {
      output.WriteRawTag(37);
      output.WriteFloat(Length);
    }
    if (Mass != 0F) {
      output.WriteRawTag(45);
      output.WriteFloat(Mass);
    }
    if (Current != 0F) {
      output.WriteRawTag(53);
      output.WriteFloat(Current);
    }
    if (Temperature != 0F) {
      output.WriteRawTag(61);
      output.WriteFloat(Temperature);
    }
    if (Substance != 0F) {
      output.WriteRawTag(69);
      output.WriteFloat(Substance);
    }
    if (LuminousIntensity != 0F) {
      output.WriteRawTag(77);
      output.WriteFloat(LuminousIntensity);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (DimensionName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DimensionName);
    }
    if (Time != 0F) {
      size += 1 + 4;
    }
    if (Length != 0F) {
      size += 1 + 4;
    }
    if (Mass != 0F) {
      size += 1 + 4;
    }
    if (Current != 0F) {
      size += 1 + 4;
    }
    if (Temperature != 0F) {
      size += 1 + 4;
    }
    if (Substance != 0F) {
      size += 1 + 4;
    }
    if (LuminousIntensity != 0F) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PhysicalDimension other) {
    if (other == null) {
      return;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.DimensionName.Length != 0) {
      DimensionName = other.DimensionName;
    }
    if (other.Time != 0F) {
      Time = other.Time;
    }
    if (other.Length != 0F) {
      Length = other.Length;
    }
    if (other.Mass != 0F) {
      Mass = other.Mass;
    }
    if (other.Current != 0F) {
      Current = other.Current;
    }
    if (other.Temperature != 0F) {
      Temperature = other.Temperature;
    }
    if (other.Substance != 0F) {
      Substance = other.Substance;
    }
    if (other.LuminousIntensity != 0F) {
      LuminousIntensity = other.LuminousIntensity;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
        case 18: {
          DimensionName = input.ReadString();
          break;
        }
        case 29: {
          Time = input.ReadFloat();
          break;
        }
        case 37: {
          Length = input.ReadFloat();
          break;
        }
        case 45: {
          Mass = input.ReadFloat();
          break;
        }
        case 53: {
          Current = input.ReadFloat();
          break;
        }
        case 61: {
          Temperature = input.ReadFloat();
          break;
        }
        case 69: {
          Substance = input.ReadFloat();
          break;
        }
        case 77: {
          LuminousIntensity = input.ReadFloat();
          break;
        }
      }
    }
  }

}

public sealed partial class PhysicalUnit : pb::IMessage<PhysicalUnit> {
  private static readonly pb::MessageParser<PhysicalUnit> _parser = new pb::MessageParser<PhysicalUnit>(() => new PhysicalUnit());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PhysicalUnit> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::UnitsReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PhysicalUnit() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PhysicalUnit(PhysicalUnit other) : this() {
    name_ = other.name_;
    unitName_ = other.unitName_;
    aliases_ = other.aliases_.Clone();
    dimension_ = other.dimension_ != null ? other.dimension_.Clone() : null;
    siMultiplier_ = other.siMultiplier_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PhysicalUnit Clone() {
    return new PhysicalUnit(this);
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 1;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "unit_name" field.</summary>
  public const int UnitNameFieldNumber = 2;
  private string unitName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string UnitName {
    get { return unitName_; }
    set {
      unitName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "aliases" field.</summary>
  public const int AliasesFieldNumber = 3;
  private static readonly pb::FieldCodec<string> _repeated_aliases_codec
      = pb::FieldCodec.ForString(26);
  private readonly pbc::RepeatedField<string> aliases_ = new pbc::RepeatedField<string>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<string> Aliases {
    get { return aliases_; }
  }

  /// <summary>Field number for the "dimension" field.</summary>
  public const int DimensionFieldNumber = 4;
  private global::PhysicalDimension dimension_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PhysicalDimension Dimension {
    get { return dimension_; }
    set {
      dimension_ = value;
    }
  }

  /// <summary>Field number for the "si_multiplier" field.</summary>
  public const int SiMultiplierFieldNumber = 5;
  private double siMultiplier_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double SiMultiplier {
    get { return siMultiplier_; }
    set {
      siMultiplier_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PhysicalUnit);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PhysicalUnit other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    if (UnitName != other.UnitName) return false;
    if(!aliases_.Equals(other.aliases_)) return false;
    if (!object.Equals(Dimension, other.Dimension)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SiMultiplier, other.SiMultiplier)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (UnitName.Length != 0) hash ^= UnitName.GetHashCode();
    hash ^= aliases_.GetHashCode();
    if (dimension_ != null) hash ^= Dimension.GetHashCode();
    if (SiMultiplier != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SiMultiplier);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Name.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
    if (UnitName.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(UnitName);
    }
    aliases_.WriteTo(output, _repeated_aliases_codec);
    if (dimension_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Dimension);
    }
    if (SiMultiplier != 0D) {
      output.WriteRawTag(41);
      output.WriteDouble(SiMultiplier);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (UnitName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(UnitName);
    }
    size += aliases_.CalculateSize(_repeated_aliases_codec);
    if (dimension_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dimension);
    }
    if (SiMultiplier != 0D) {
      size += 1 + 8;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PhysicalUnit other) {
    if (other == null) {
      return;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.UnitName.Length != 0) {
      UnitName = other.UnitName;
    }
    aliases_.Add(other.aliases_);
    if (other.dimension_ != null) {
      if (dimension_ == null) {
        dimension_ = new global::PhysicalDimension();
      }
      Dimension.MergeFrom(other.Dimension);
    }
    if (other.SiMultiplier != 0D) {
      SiMultiplier = other.SiMultiplier;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
        case 18: {
          UnitName = input.ReadString();
          break;
        }
        case 26: {
          aliases_.AddEntriesFrom(input, _repeated_aliases_codec);
          break;
        }
        case 34: {
          if (dimension_ == null) {
            dimension_ = new global::PhysicalDimension();
          }
          input.ReadMessage(dimension_);
          break;
        }
        case 41: {
          SiMultiplier = input.ReadDouble();
          break;
        }
      }
    }
  }

}

public sealed partial class PhysicalQuantity : pb::IMessage<PhysicalQuantity> {
  private static readonly pb::MessageParser<PhysicalQuantity> _parser = new pb::MessageParser<PhysicalQuantity>(() => new PhysicalQuantity());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PhysicalQuantity> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::UnitsReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PhysicalQuantity() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PhysicalQuantity(PhysicalQuantity other) : this() {
    name_ = other.name_;
    unit_ = other.unit_ != null ? other.unit_.Clone() : null;
    magnitude_ = other.magnitude_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PhysicalQuantity Clone() {
    return new PhysicalQuantity(this);
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 1;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "unit" field.</summary>
  public const int UnitFieldNumber = 2;
  private global::PhysicalUnit unit_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PhysicalUnit Unit {
    get { return unit_; }
    set {
      unit_ = value;
    }
  }

  /// <summary>Field number for the "magnitude" field.</summary>
  public const int MagnitudeFieldNumber = 3;
  private double magnitude_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Magnitude {
    get { return magnitude_; }
    set {
      magnitude_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PhysicalQuantity);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PhysicalQuantity other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    if (!object.Equals(Unit, other.Unit)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Magnitude, other.Magnitude)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (unit_ != null) hash ^= Unit.GetHashCode();
    if (Magnitude != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Magnitude);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Name.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
    if (unit_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Unit);
    }
    if (Magnitude != 0D) {
      output.WriteRawTag(25);
      output.WriteDouble(Magnitude);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (unit_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Unit);
    }
    if (Magnitude != 0D) {
      size += 1 + 8;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PhysicalQuantity other) {
    if (other == null) {
      return;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.unit_ != null) {
      if (unit_ == null) {
        unit_ = new global::PhysicalUnit();
      }
      Unit.MergeFrom(other.Unit);
    }
    if (other.Magnitude != 0D) {
      Magnitude = other.Magnitude;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
        case 18: {
          if (unit_ == null) {
            unit_ = new global::PhysicalUnit();
          }
          input.ReadMessage(unit_);
          break;
        }
        case 25: {
          Magnitude = input.ReadDouble();
          break;
        }
      }
    }
  }

}

public sealed partial class Timestamp : pb::IMessage<Timestamp> {
  private static readonly pb::MessageParser<Timestamp> _parser = new pb::MessageParser<Timestamp>(() => new Timestamp());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Timestamp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::UnitsReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Timestamp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Timestamp(Timestamp other) : this() {
    name_ = other.name_;
    value_ = other.value_;
    precisionName_ = other.precisionName_;
    precisionExponent_ = other.precisionExponent_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Timestamp Clone() {
    return new Timestamp(this);
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 1;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "value" field.</summary>
  public const int ValueFieldNumber = 2;
  private long value_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Value {
    get { return value_; }
    set {
      value_ = value;
    }
  }

  /// <summary>Field number for the "precision_name" field.</summary>
  public const int PrecisionNameFieldNumber = 3;
  private string precisionName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string PrecisionName {
    get { return precisionName_; }
    set {
      precisionName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "precision_exponent" field.</summary>
  public const int PrecisionExponentFieldNumber = 4;
  private int precisionExponent_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PrecisionExponent {
    get { return precisionExponent_; }
    set {
      precisionExponent_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Timestamp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Timestamp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    if (Value != other.Value) return false;
    if (PrecisionName != other.PrecisionName) return false;
    if (PrecisionExponent != other.PrecisionExponent) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Value != 0L) hash ^= Value.GetHashCode();
    if (PrecisionName.Length != 0) hash ^= PrecisionName.GetHashCode();
    if (PrecisionExponent != 0) hash ^= PrecisionExponent.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Name.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
    if (Value != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(Value);
    }
    if (PrecisionName.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(PrecisionName);
    }
    if (PrecisionExponent != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(PrecisionExponent);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Value != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Value);
    }
    if (PrecisionName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(PrecisionName);
    }
    if (PrecisionExponent != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PrecisionExponent);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Timestamp other) {
    if (other == null) {
      return;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Value != 0L) {
      Value = other.Value;
    }
    if (other.PrecisionName.Length != 0) {
      PrecisionName = other.PrecisionName;
    }
    if (other.PrecisionExponent != 0) {
      PrecisionExponent = other.PrecisionExponent;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
        case 16: {
          Value = input.ReadInt64();
          break;
        }
        case 26: {
          PrecisionName = input.ReadString();
          break;
        }
        case 32: {
          PrecisionExponent = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PhysicalMeasurement : pb::IMessage<PhysicalMeasurement> {
  private static readonly pb::MessageParser<PhysicalMeasurement> _parser = new pb::MessageParser<PhysicalMeasurement>(() => new PhysicalMeasurement());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PhysicalMeasurement> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::UnitsReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PhysicalMeasurement() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PhysicalMeasurement(PhysicalMeasurement other) : this() {
    name_ = other.name_;
    value_ = other.value_ != null ? other.value_.Clone() : null;
    quality_ = other.quality_;
    timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PhysicalMeasurement Clone() {
    return new PhysicalMeasurement(this);
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 1;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "value" field.</summary>
  public const int ValueFieldNumber = 2;
  private global::PhysicalQuantity value_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PhysicalQuantity Value {
    get { return value_; }
    set {
      value_ = value;
    }
  }

  /// <summary>Field number for the "quality" field.</summary>
  public const int QualityFieldNumber = 3;
  private global::DataQuality quality_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DataQuality Quality {
    get { return quality_; }
    set {
      quality_ = value;
    }
  }

  /// <summary>Field number for the "timestamp" field.</summary>
  public const int TimestampFieldNumber = 4;
  private global::Timestamp timestamp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Timestamp Timestamp {
    get { return timestamp_; }
    set {
      timestamp_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PhysicalMeasurement);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PhysicalMeasurement other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    if (!object.Equals(Value, other.Value)) return false;
    if (Quality != other.Quality) return false;
    if (!object.Equals(Timestamp, other.Timestamp)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (value_ != null) hash ^= Value.GetHashCode();
    if (Quality != 0) hash ^= Quality.GetHashCode();
    if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Name.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
    if (value_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Value);
    }
    if (Quality != 0) {
      output.WriteRawTag(24);
      output.WriteEnum((int) Quality);
    }
    if (timestamp_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Timestamp);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (value_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Value);
    }
    if (Quality != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Quality);
    }
    if (timestamp_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PhysicalMeasurement other) {
    if (other == null) {
      return;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.value_ != null) {
      if (value_ == null) {
        value_ = new global::PhysicalQuantity();
      }
      Value.MergeFrom(other.Value);
    }
    if (other.Quality != 0) {
      Quality = other.Quality;
    }
    if (other.timestamp_ != null) {
      if (timestamp_ == null) {
        timestamp_ = new global::Timestamp();
      }
      Timestamp.MergeFrom(other.Timestamp);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
        case 18: {
          if (value_ == null) {
            value_ = new global::PhysicalQuantity();
          }
          input.ReadMessage(value_);
          break;
        }
        case 24: {
          quality_ = (global::DataQuality) input.ReadEnum();
          break;
        }
        case 34: {
          if (timestamp_ == null) {
            timestamp_ = new global::Timestamp();
          }
          input.ReadMessage(timestamp_);
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
