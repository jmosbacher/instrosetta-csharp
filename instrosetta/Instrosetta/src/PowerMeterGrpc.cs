// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: instrosetta/interfaces/light_analysis/power_meter.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1 {
  public static partial class PowerMeter
  {
    static readonly string __ServiceName = "instrosetta.interfaces.light_analysis.power_meter.v1.PowerMeter";

    static readonly grpc::Marshaller<global::ConnectRequest> __Marshaller_ConnectRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ConnectRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ConnectResponse> __Marshaller_ConnectResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ConnectResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::DisconnectRequest> __Marshaller_DisconnectRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::DisconnectRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::DisconnectResponse> __Marshaller_DisconnectResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::DisconnectResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetPowerRequest> __Marshaller_instrosetta_interfaces_light_analysis_power_meter_v1_GetPowerRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetPowerRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetPowerResponse> __Marshaller_instrosetta_interfaces_light_analysis_power_meter_v1_GetPowerResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetPowerResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetPowerRequest> __Marshaller_instrosetta_interfaces_light_analysis_power_meter_v1_SetPowerRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetPowerRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetPowerResponse> __Marshaller_instrosetta_interfaces_light_analysis_power_meter_v1_SetPowerResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetPowerResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetCountRequest> __Marshaller_instrosetta_interfaces_light_analysis_power_meter_v1_GetCountRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetCountRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetCountResponse> __Marshaller_instrosetta_interfaces_light_analysis_power_meter_v1_GetCountResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetCountResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetCountRequest> __Marshaller_instrosetta_interfaces_light_analysis_power_meter_v1_SetCountRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetCountRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetCountResponse> __Marshaller_instrosetta_interfaces_light_analysis_power_meter_v1_SetCountResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetCountResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetWavelengthRequest> __Marshaller_instrosetta_interfaces_light_analysis_power_meter_v1_GetWavelengthRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetWavelengthRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetWavelengthResponse> __Marshaller_instrosetta_interfaces_light_analysis_power_meter_v1_GetWavelengthResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetWavelengthResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetWavelengthRequest> __Marshaller_instrosetta_interfaces_light_analysis_power_meter_v1_SetWavelengthRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetWavelengthRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetWavelengthResponse> __Marshaller_instrosetta_interfaces_light_analysis_power_meter_v1_SetWavelengthResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetWavelengthResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetModeRequest> __Marshaller_instrosetta_interfaces_light_analysis_power_meter_v1_GetModeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetModeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetModeResponse> __Marshaller_instrosetta_interfaces_light_analysis_power_meter_v1_GetModeResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetModeResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetModeRequest> __Marshaller_instrosetta_interfaces_light_analysis_power_meter_v1_SetModeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetModeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetModeResponse> __Marshaller_instrosetta_interfaces_light_analysis_power_meter_v1_SetModeResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetModeResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetAutorangeRequest> __Marshaller_instrosetta_interfaces_light_analysis_power_meter_v1_GetAutorangeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetAutorangeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetAutorangeResponse> __Marshaller_instrosetta_interfaces_light_analysis_power_meter_v1_GetAutorangeResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetAutorangeResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetAutorangeRequest> __Marshaller_instrosetta_interfaces_light_analysis_power_meter_v1_SetAutorangeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetAutorangeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetAutorangeResponse> __Marshaller_instrosetta_interfaces_light_analysis_power_meter_v1_SetAutorangeResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetAutorangeResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::ConnectRequest, global::ConnectResponse> __Method_Connect = new grpc::Method<global::ConnectRequest, global::ConnectResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Connect",
        __Marshaller_ConnectRequest,
        __Marshaller_ConnectResponse);

    static readonly grpc::Method<global::DisconnectRequest, global::DisconnectResponse> __Method_Disconnect = new grpc::Method<global::DisconnectRequest, global::DisconnectResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Disconnect",
        __Marshaller_DisconnectRequest,
        __Marshaller_DisconnectResponse);

    static readonly grpc::Method<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetPowerRequest, global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetPowerResponse> __Method_GetPower = new grpc::Method<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetPowerRequest, global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetPowerResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPower",
        __Marshaller_instrosetta_interfaces_light_analysis_power_meter_v1_GetPowerRequest,
        __Marshaller_instrosetta_interfaces_light_analysis_power_meter_v1_GetPowerResponse);

    static readonly grpc::Method<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetPowerRequest, global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetPowerResponse> __Method_SetPower = new grpc::Method<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetPowerRequest, global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetPowerResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetPower",
        __Marshaller_instrosetta_interfaces_light_analysis_power_meter_v1_SetPowerRequest,
        __Marshaller_instrosetta_interfaces_light_analysis_power_meter_v1_SetPowerResponse);

    static readonly grpc::Method<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetCountRequest, global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetCountResponse> __Method_GetCount = new grpc::Method<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetCountRequest, global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetCountResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCount",
        __Marshaller_instrosetta_interfaces_light_analysis_power_meter_v1_GetCountRequest,
        __Marshaller_instrosetta_interfaces_light_analysis_power_meter_v1_GetCountResponse);

    static readonly grpc::Method<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetCountRequest, global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetCountResponse> __Method_SetCount = new grpc::Method<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetCountRequest, global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetCountResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetCount",
        __Marshaller_instrosetta_interfaces_light_analysis_power_meter_v1_SetCountRequest,
        __Marshaller_instrosetta_interfaces_light_analysis_power_meter_v1_SetCountResponse);

    static readonly grpc::Method<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetWavelengthRequest, global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetWavelengthResponse> __Method_GetWavelength = new grpc::Method<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetWavelengthRequest, global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetWavelengthResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetWavelength",
        __Marshaller_instrosetta_interfaces_light_analysis_power_meter_v1_GetWavelengthRequest,
        __Marshaller_instrosetta_interfaces_light_analysis_power_meter_v1_GetWavelengthResponse);

    static readonly grpc::Method<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetWavelengthRequest, global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetWavelengthResponse> __Method_SetWavelength = new grpc::Method<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetWavelengthRequest, global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetWavelengthResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetWavelength",
        __Marshaller_instrosetta_interfaces_light_analysis_power_meter_v1_SetWavelengthRequest,
        __Marshaller_instrosetta_interfaces_light_analysis_power_meter_v1_SetWavelengthResponse);

    static readonly grpc::Method<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetModeRequest, global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetModeResponse> __Method_GetMode = new grpc::Method<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetModeRequest, global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetModeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetMode",
        __Marshaller_instrosetta_interfaces_light_analysis_power_meter_v1_GetModeRequest,
        __Marshaller_instrosetta_interfaces_light_analysis_power_meter_v1_GetModeResponse);

    static readonly grpc::Method<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetModeRequest, global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetModeResponse> __Method_SetMode = new grpc::Method<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetModeRequest, global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetModeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetMode",
        __Marshaller_instrosetta_interfaces_light_analysis_power_meter_v1_SetModeRequest,
        __Marshaller_instrosetta_interfaces_light_analysis_power_meter_v1_SetModeResponse);

    static readonly grpc::Method<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetAutorangeRequest, global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetAutorangeResponse> __Method_GetAutorange = new grpc::Method<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetAutorangeRequest, global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetAutorangeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAutorange",
        __Marshaller_instrosetta_interfaces_light_analysis_power_meter_v1_GetAutorangeRequest,
        __Marshaller_instrosetta_interfaces_light_analysis_power_meter_v1_GetAutorangeResponse);

    static readonly grpc::Method<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetAutorangeRequest, global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetAutorangeResponse> __Method_SetAutorange = new grpc::Method<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetAutorangeRequest, global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetAutorangeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetAutorange",
        __Marshaller_instrosetta_interfaces_light_analysis_power_meter_v1_SetAutorangeRequest,
        __Marshaller_instrosetta_interfaces_light_analysis_power_meter_v1_SetAutorangeResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.PowerMeterReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of PowerMeter</summary>
    public abstract partial class PowerMeterBase
    {
      public virtual global::System.Threading.Tasks.Task<global::ConnectResponse> Connect(global::ConnectRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::DisconnectResponse> Disconnect(global::DisconnectRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetPowerResponse> GetPower(global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetPowerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetPowerResponse> SetPower(global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetPowerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetCountResponse> GetCount(global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetCountRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetCountResponse> SetCount(global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetCountRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetWavelengthResponse> GetWavelength(global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetWavelengthRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetWavelengthResponse> SetWavelength(global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetWavelengthRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetModeResponse> GetMode(global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetModeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetModeResponse> SetMode(global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetModeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetAutorangeResponse> GetAutorange(global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetAutorangeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetAutorangeResponse> SetAutorange(global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetAutorangeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for PowerMeter</summary>
    public partial class PowerMeterClient : grpc::ClientBase<PowerMeterClient>
    {
      /// <summary>Creates a new client for PowerMeter</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public PowerMeterClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for PowerMeter that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public PowerMeterClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected PowerMeterClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected PowerMeterClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::ConnectResponse Connect(global::ConnectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Connect(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::ConnectResponse Connect(global::ConnectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Connect, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::ConnectResponse> ConnectAsync(global::ConnectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ConnectAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::ConnectResponse> ConnectAsync(global::ConnectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Connect, null, options, request);
      }
      public virtual global::DisconnectResponse Disconnect(global::DisconnectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Disconnect(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::DisconnectResponse Disconnect(global::DisconnectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Disconnect, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::DisconnectResponse> DisconnectAsync(global::DisconnectRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DisconnectAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::DisconnectResponse> DisconnectAsync(global::DisconnectRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Disconnect, null, options, request);
      }
      public virtual global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetPowerResponse GetPower(global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetPowerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPower(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetPowerResponse GetPower(global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetPowerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPower, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetPowerResponse> GetPowerAsync(global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetPowerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPowerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetPowerResponse> GetPowerAsync(global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetPowerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPower, null, options, request);
      }
      public virtual global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetPowerResponse SetPower(global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetPowerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetPower(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetPowerResponse SetPower(global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetPowerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetPower, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetPowerResponse> SetPowerAsync(global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetPowerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetPowerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetPowerResponse> SetPowerAsync(global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetPowerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetPower, null, options, request);
      }
      public virtual global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetCountResponse GetCount(global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetCountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetCountResponse GetCount(global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetCountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCount, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetCountResponse> GetCountAsync(global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetCountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetCountResponse> GetCountAsync(global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetCountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCount, null, options, request);
      }
      public virtual global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetCountResponse SetCount(global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetCountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetCount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetCountResponse SetCount(global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetCountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetCount, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetCountResponse> SetCountAsync(global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetCountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetCountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetCountResponse> SetCountAsync(global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetCountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetCount, null, options, request);
      }
      public virtual global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetWavelengthResponse GetWavelength(global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetWavelengthRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWavelength(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetWavelengthResponse GetWavelength(global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetWavelengthRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetWavelength, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetWavelengthResponse> GetWavelengthAsync(global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetWavelengthRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWavelengthAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetWavelengthResponse> GetWavelengthAsync(global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetWavelengthRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetWavelength, null, options, request);
      }
      public virtual global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetWavelengthResponse SetWavelength(global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetWavelengthRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetWavelength(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetWavelengthResponse SetWavelength(global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetWavelengthRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetWavelength, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetWavelengthResponse> SetWavelengthAsync(global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetWavelengthRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetWavelengthAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetWavelengthResponse> SetWavelengthAsync(global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetWavelengthRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetWavelength, null, options, request);
      }
      public virtual global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetModeResponse GetMode(global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetModeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetMode(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetModeResponse GetMode(global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetModeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetMode, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetModeResponse> GetModeAsync(global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetModeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetModeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetModeResponse> GetModeAsync(global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetModeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetMode, null, options, request);
      }
      public virtual global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetModeResponse SetMode(global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetModeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetMode(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetModeResponse SetMode(global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetModeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetMode, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetModeResponse> SetModeAsync(global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetModeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetModeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetModeResponse> SetModeAsync(global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetModeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetMode, null, options, request);
      }
      public virtual global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetAutorangeResponse GetAutorange(global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetAutorangeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAutorange(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetAutorangeResponse GetAutorange(global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetAutorangeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAutorange, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetAutorangeResponse> GetAutorangeAsync(global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetAutorangeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAutorangeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetAutorangeResponse> GetAutorangeAsync(global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetAutorangeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAutorange, null, options, request);
      }
      public virtual global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetAutorangeResponse SetAutorange(global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetAutorangeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetAutorange(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetAutorangeResponse SetAutorange(global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetAutorangeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetAutorange, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetAutorangeResponse> SetAutorangeAsync(global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetAutorangeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetAutorangeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetAutorangeResponse> SetAutorangeAsync(global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetAutorangeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetAutorange, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override PowerMeterClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new PowerMeterClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(PowerMeterBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Connect, serviceImpl.Connect)
          .AddMethod(__Method_Disconnect, serviceImpl.Disconnect)
          .AddMethod(__Method_GetPower, serviceImpl.GetPower)
          .AddMethod(__Method_SetPower, serviceImpl.SetPower)
          .AddMethod(__Method_GetCount, serviceImpl.GetCount)
          .AddMethod(__Method_SetCount, serviceImpl.SetCount)
          .AddMethod(__Method_GetWavelength, serviceImpl.GetWavelength)
          .AddMethod(__Method_SetWavelength, serviceImpl.SetWavelength)
          .AddMethod(__Method_GetMode, serviceImpl.GetMode)
          .AddMethod(__Method_SetMode, serviceImpl.SetMode)
          .AddMethod(__Method_GetAutorange, serviceImpl.GetAutorange)
          .AddMethod(__Method_SetAutorange, serviceImpl.SetAutorange).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, PowerMeterBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Connect, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ConnectRequest, global::ConnectResponse>(serviceImpl.Connect));
      serviceBinder.AddMethod(__Method_Disconnect, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::DisconnectRequest, global::DisconnectResponse>(serviceImpl.Disconnect));
      serviceBinder.AddMethod(__Method_GetPower, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetPowerRequest, global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetPowerResponse>(serviceImpl.GetPower));
      serviceBinder.AddMethod(__Method_SetPower, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetPowerRequest, global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetPowerResponse>(serviceImpl.SetPower));
      serviceBinder.AddMethod(__Method_GetCount, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetCountRequest, global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetCountResponse>(serviceImpl.GetCount));
      serviceBinder.AddMethod(__Method_SetCount, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetCountRequest, global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetCountResponse>(serviceImpl.SetCount));
      serviceBinder.AddMethod(__Method_GetWavelength, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetWavelengthRequest, global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetWavelengthResponse>(serviceImpl.GetWavelength));
      serviceBinder.AddMethod(__Method_SetWavelength, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetWavelengthRequest, global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetWavelengthResponse>(serviceImpl.SetWavelength));
      serviceBinder.AddMethod(__Method_GetMode, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetModeRequest, global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetModeResponse>(serviceImpl.GetMode));
      serviceBinder.AddMethod(__Method_SetMode, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetModeRequest, global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetModeResponse>(serviceImpl.SetMode));
      serviceBinder.AddMethod(__Method_GetAutorange, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetAutorangeRequest, global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.GetAutorangeResponse>(serviceImpl.GetAutorange));
      serviceBinder.AddMethod(__Method_SetAutorange, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetAutorangeRequest, global::Instrosetta.Interfaces.LightAnalysis.PowerMeter.V1.SetAutorangeResponse>(serviceImpl.SetAutorange));
    }

  }
}
#endregion
