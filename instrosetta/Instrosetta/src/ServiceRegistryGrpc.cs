// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: instrosetta/interfaces/general/service_registry.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Instrosetta.Interfaces.General.ServiceRegistry.V1 {
  public static partial class ServiceRegistry
  {
    static readonly string __ServiceName = "instrosetta.interfaces.general.service_registry.v1.ServiceRegistry";

    static readonly grpc::Marshaller<global::Instrosetta.Interfaces.General.ServiceRegistry.V1.GetActiveServersRequest> __Marshaller_instrosetta_interfaces_general_service_registry_v1_GetActiveServersRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Instrosetta.Interfaces.General.ServiceRegistry.V1.GetActiveServersRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Instrosetta.Interfaces.General.ServiceRegistry.V1.GetActiveServersResponse> __Marshaller_instrosetta_interfaces_general_service_registry_v1_GetActiveServersResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Instrosetta.Interfaces.General.ServiceRegistry.V1.GetActiveServersResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Instrosetta.Interfaces.General.ServiceRegistry.V1.GetConnectedServersRequest> __Marshaller_instrosetta_interfaces_general_service_registry_v1_GetConnectedServersRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Instrosetta.Interfaces.General.ServiceRegistry.V1.GetConnectedServersRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Instrosetta.Interfaces.General.ServiceRegistry.V1.GetConnectedServersResponse> __Marshaller_instrosetta_interfaces_general_service_registry_v1_GetConnectedServersResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Instrosetta.Interfaces.General.ServiceRegistry.V1.GetConnectedServersResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Instrosetta.Interfaces.General.ServiceRegistry.V1.GetActiveServersRequest, global::Instrosetta.Interfaces.General.ServiceRegistry.V1.GetActiveServersResponse> __Method_GetActiveServers = new grpc::Method<global::Instrosetta.Interfaces.General.ServiceRegistry.V1.GetActiveServersRequest, global::Instrosetta.Interfaces.General.ServiceRegistry.V1.GetActiveServersResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetActiveServers",
        __Marshaller_instrosetta_interfaces_general_service_registry_v1_GetActiveServersRequest,
        __Marshaller_instrosetta_interfaces_general_service_registry_v1_GetActiveServersResponse);

    static readonly grpc::Method<global::Instrosetta.Interfaces.General.ServiceRegistry.V1.GetConnectedServersRequest, global::Instrosetta.Interfaces.General.ServiceRegistry.V1.GetConnectedServersResponse> __Method_GetConnectedServers = new grpc::Method<global::Instrosetta.Interfaces.General.ServiceRegistry.V1.GetConnectedServersRequest, global::Instrosetta.Interfaces.General.ServiceRegistry.V1.GetConnectedServersResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetConnectedServers",
        __Marshaller_instrosetta_interfaces_general_service_registry_v1_GetConnectedServersRequest,
        __Marshaller_instrosetta_interfaces_general_service_registry_v1_GetConnectedServersResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Instrosetta.Interfaces.General.ServiceRegistry.V1.ServiceRegistryReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ServiceRegistry</summary>
    public abstract partial class ServiceRegistryBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Instrosetta.Interfaces.General.ServiceRegistry.V1.GetActiveServersResponse> GetActiveServers(global::Instrosetta.Interfaces.General.ServiceRegistry.V1.GetActiveServersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Instrosetta.Interfaces.General.ServiceRegistry.V1.GetConnectedServersResponse> GetConnectedServers(global::Instrosetta.Interfaces.General.ServiceRegistry.V1.GetConnectedServersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ServiceRegistry</summary>
    public partial class ServiceRegistryClient : grpc::ClientBase<ServiceRegistryClient>
    {
      /// <summary>Creates a new client for ServiceRegistry</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ServiceRegistryClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ServiceRegistry that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ServiceRegistryClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ServiceRegistryClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ServiceRegistryClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Instrosetta.Interfaces.General.ServiceRegistry.V1.GetActiveServersResponse GetActiveServers(global::Instrosetta.Interfaces.General.ServiceRegistry.V1.GetActiveServersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetActiveServers(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Instrosetta.Interfaces.General.ServiceRegistry.V1.GetActiveServersResponse GetActiveServers(global::Instrosetta.Interfaces.General.ServiceRegistry.V1.GetActiveServersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetActiveServers, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Instrosetta.Interfaces.General.ServiceRegistry.V1.GetActiveServersResponse> GetActiveServersAsync(global::Instrosetta.Interfaces.General.ServiceRegistry.V1.GetActiveServersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetActiveServersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Instrosetta.Interfaces.General.ServiceRegistry.V1.GetActiveServersResponse> GetActiveServersAsync(global::Instrosetta.Interfaces.General.ServiceRegistry.V1.GetActiveServersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetActiveServers, null, options, request);
      }
      public virtual global::Instrosetta.Interfaces.General.ServiceRegistry.V1.GetConnectedServersResponse GetConnectedServers(global::Instrosetta.Interfaces.General.ServiceRegistry.V1.GetConnectedServersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetConnectedServers(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Instrosetta.Interfaces.General.ServiceRegistry.V1.GetConnectedServersResponse GetConnectedServers(global::Instrosetta.Interfaces.General.ServiceRegistry.V1.GetConnectedServersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetConnectedServers, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Instrosetta.Interfaces.General.ServiceRegistry.V1.GetConnectedServersResponse> GetConnectedServersAsync(global::Instrosetta.Interfaces.General.ServiceRegistry.V1.GetConnectedServersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetConnectedServersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Instrosetta.Interfaces.General.ServiceRegistry.V1.GetConnectedServersResponse> GetConnectedServersAsync(global::Instrosetta.Interfaces.General.ServiceRegistry.V1.GetConnectedServersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetConnectedServers, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ServiceRegistryClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ServiceRegistryClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ServiceRegistryBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetActiveServers, serviceImpl.GetActiveServers)
          .AddMethod(__Method_GetConnectedServers, serviceImpl.GetConnectedServers).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ServiceRegistryBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetActiveServers, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Instrosetta.Interfaces.General.ServiceRegistry.V1.GetActiveServersRequest, global::Instrosetta.Interfaces.General.ServiceRegistry.V1.GetActiveServersResponse>(serviceImpl.GetActiveServers));
      serviceBinder.AddMethod(__Method_GetConnectedServers, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Instrosetta.Interfaces.General.ServiceRegistry.V1.GetConnectedServersRequest, global::Instrosetta.Interfaces.General.ServiceRegistry.V1.GetConnectedServersResponse>(serviceImpl.GetConnectedServers));
    }

  }
}
#endregion
